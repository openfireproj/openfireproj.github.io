{"version":3,"sources":["equations/com.mtgprofessor/monthly-payment.js","utils/test.js","equations/com.mtgprofessor/monthy-payment.test.js"],"names":["Config","id","title","description","params","loan","label","default","type","min","max","Number","POSITIVE_INFINITY","periods","rate","result","name","equation","Math","abs","numer","pow","denom","round","rootProperties","validParamTypes","currency","select","options","propertyChecker","obj","expectedPropConfig","Object","entries","prop","propType","expect","Array","isArray","filterParamsByType","targetType","ret","paramName","paramConfig","describe","it","toEqual","validTypes","keys","values","every","includes","validType","validConfig","filteredParams","validateParams"],"mappings":"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","file":"static/js/0.153f8661.chunk.js","sourcesContent":["/**\n * This equation was sourced from https://www.mtgprofessor.com/calculators.htm\n */\n\nexport default class Config {\n  static id = \"monthly-payment\"\n  static title = \"Monthly Payment\"\n  static description = \"Calculate the fixed monthly payment required to fully amortize a loan over a term of periods (months) at a monthly interest rate (%).\"\n\n  static params = {\n    loan: {\n      label: \"Loan\",\n      default: 830000,\n      type: \"currency\",\n      min: 0,\n      max: Number.POSITIVE_INFINITY,      \n    },\n    periods: {\n      label: \"Periods (months)\",\n      default: 360,\n      type: \"currency\",\n      min: 0,\n      max: Number.POSITIVE_INFINITY,\n    },\n    rate: {\n      label: \"Interest Rate (Annual)\",\n      default: 0.037,\n      type: \"currency\",\n      min: 0,\n      max: Number.POSITIVE_INFINITY,\n    }\n  }\n  static result = {\n    name: 'result',\n    label: \"Payment\",\n    type: \"text\",\n  }\n  static equation = ({loan, rate, periods} = {}) => {\n    if (!loan || loan > this.params.loan.max) {\n      loan = this.params.loan.default;\n    } else if (loan < this.params.loan.min) {\n      loan = Math.abs(loan);\n    }    \n    \n    if (!periods || periods > this.params.periods.max) {\n      periods = this.params.periods.default;\n    } else if (periods < this.params.periods.min) {\n      periods = Math.abs(periods);\n    }\n\n    if (!rate || rate > this.params.rate.max) {\n      rate = this.params.rate.default;\n    } else if (rate < this.params.rate.min) {\n      rate = Math.abs(rate);\n    }\n    \n    rate = rate/12\n    const numer = rate * Math.pow(1+rate, periods)\n    const denom = Math.pow(1+rate, periods) - 1\n    return Math.round(loan * (numer/denom))\n  }\n}\n","export const rootProperties = {\n  title: \"string\",\n  description: \"string\",\n  params: \"object\",\n  result: \"object\",\n  equation: \"function\"\n};\n\nexport const validParamTypes = {\n  currency: {\n    label: \"string\",\n    default: \"number\",\n    type: \"string\",\n    min: \"number\",\n    max: \"number\"\n  },\n  select: {\n    label: \"string\",\n    default: \"any\",\n    type: \"string\",\n    options: \"object\"\n  }\n}\n\nexport const propertyChecker = (obj, expectedPropConfig) => {\n  for (const [prop, propType] of Object.entries(expectedPropConfig)) {\n    if (propType === \"array\") {\n      expect(Array.isArray(obj[prop]));\n    } else {\n      expect(typeof obj[prop] === propType)\n    }\n  }\n}\n\nconst filterParamsByType = (params, targetType) => {\n  const ret = {};\n  for (const [paramName, paramConfig] of Object.entries(params)) {\n    if (paramConfig.type === targetType) {\n      ret[paramName] = paramConfig;\n    }\n  }\n  return ret;\n}\n\nexport const validateParams = params => {\n  // first check that all of the params have valid types\n  const validTypes = Object.keys(validParamTypes);\n  expect(Object.values(params).every(paramConfig => validTypes.includes(paramConfig.type)));\n\n  // next, bucket each type and validate they they have the required fields\n  for (const [validType, validConfig] of Object.entries(validParamTypes)) {\n    const filteredParams = filterParamsByType(params, validType);\n    propertyChecker(filteredParams, validConfig);\n  }\n}\n\n","import Config from './monthly-payment';\n\nimport { \n  propertyChecker,\n  rootProperties,\n  validParamTypes,\n  validateParams\n} from '../../utils/test'\n\ndescribe('monthly-payment', () => {\n  it(\"includes the required properties\", () => {\n    propertyChecker(Config, rootProperties);\n  });\n\n  it(\"has the expected title\", () => {\n    expect(Config.title).toEqual(\"Monthly Payment\");\n  });\n\n  it(\"has the expected description\", () => {\n    expect(Config.description).toEqual(\n      \"Calculate the fixed monthly payment required to fully amortize a loan over a term of periods (months) at a monthly interest rate (%).\"\n      );\n  });\n\n  it(\"has valid params\", () => {\n    validateParams(Config.params);\n  });\n\n  it(\"has loan, periods, and rate params\", () => {\n    expect(Object.keys(Config.params)).toEqual(['loan', 'periods', 'rate']);\n  });\n\n  it(\"only has currency param types\", () => {\n    expect(Object.values(Config.params).every(paramConfig => paramConfig.type === \"currency\"));\n  });\n\n  it(\"returns the expected result from the equation\", () => {\n    // 350k 15 year @ 3.7%\n    expect(Config.equation({ loan: 350000, rate: 0.037, periods: 180})).toEqual(2537);\n    // 800k 30 year @ 3.92%\n    expect(Config.equation({ loan: 800000, rate: 0.0392, periods: 360})).toEqual(3783);\n  });\n\n  it(\"uses the default loan if input is invalid\", () => {    \n    expect(Config.equation({ rate: 0.037, periods: 180})).toEqual(6015);\n  });\n\n  it(\"converts loan to absolute value if input is less than min\", () => {    \n    expect(Config.equation({ loan: -500000, rate: 0.037, periods: 180})).toEqual(3624);\n  });\n\n  it(\"uses the default periods if input is invalid\", () => {    \n    expect(Config.equation({ loan: 800000, rate: 0.0392 })).toEqual(3783);\n  });\n\n  it(\"converts periods to absolute value if input is less than min\", () => {    \n    expect(Config.equation({ loan: 350000, rate: 0.037, periods: -180 })).toEqual(2537);\n  });\n\n  it(\"uses the default rate if input is invalid\", () => {    \n    expect(Config.equation({ loan: 350000, periods: 180})).toEqual(2537);\n  });\n\n  it(\"converts periods to absolute value if input is less than min\", () => {    \n    expect(Config.equation({ loan: 800000, rate: -0.0392, periods: 360 })).toEqual(3783);\n  });\n});\n"],"sourceRoot":""}