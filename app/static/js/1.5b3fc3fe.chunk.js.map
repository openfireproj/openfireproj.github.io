{"version":3,"sources":["equations/compound-interest.js","equations/compound-interest.test.js"],"names":["pow","Math","exp","Config","title","description","params","principal","label","default","type","min","max","Number","POSITIVE_INFINITY","periods","rate","result","name","equation","compoundInterestWithMonthlyContributions","monthlyContributions","annualInterestRate","compoundsPerYear","numberOfYears","totalContrubutions","principalAfterInterest","contributationsAfterInterest","futureValue","interestOnPrincipal","interestOnContributions","totalInterest","describe","it","expect","toEqual"],"mappings":"4OAAMA,EAAMC,KAAKD,IACXE,EAAMD,KAAKC,IAEIC,E,kCAAAA,EACZC,MAAQ,oBADID,EAEZE,YAAc,0BAFFF,EAIZG,OAAS,CACdC,UAAW,CACTC,MAAO,YACPC,QAAS,IACTC,KAAM,WACNC,IAAK,EACLC,IAAKC,OAAOC,mBAEdC,QAAS,CACPP,MAAO,UACPC,QAAS,GACTC,KAAM,YAERM,KAAM,CACJR,MAAO,yBACPC,QAAS,KACTC,KAAM,aApBSP,EAuBZc,OAAS,CACdC,KAAM,SACNV,MAAO,UACPE,KAAM,YA1BWP,EA4BZgB,SAAY,WAAsC,IAAD,yDAAP,GAA5BZ,EAAmC,EAAnCA,UAAWS,EAAwB,EAAxBA,KAAMD,EAAkB,EAAlBA,QAClC,OAAOR,EAAYL,EAAIc,EAAKD,IAK3B,IAAMK,EACb,SACEb,EACAc,EACAC,EACAC,EACAC,GAEE,IAAMC,EAAqBJ,EAAuBG,EAAgB,GAC5DE,EAAyBnB,EAAYP,EAAI,EAAIsB,EAAmB,IAAKC,EAAkBA,EAAiBC,GACxGG,EAA+BN,IAAuBrB,EAAK,EAAIsB,EAAmB,IAAKC,EAAoBA,EAAiBC,GAAgB,IAAKF,EAAmB,IAAKC,IACzKK,EAAcF,EAAyBC,EAC7C,MAAO,CACLC,cACAH,qBACAI,oBAAqBH,EAAyBnB,EAC9CuB,wBAAyBH,EAA+BF,EACxDM,eAAmBL,EAAuBnB,GAAYoB,EAA6BF,IAAqBG,EAAa,O,iCCtD3H,oBAEAI,SAAS,qBAAqB,WAE5BC,GAAG,iDAAiD,WAClDC,OAAO/B,UAAOgB,SAAS,CAAEZ,UAAW,IAAQS,KAAM,EAAMD,QAAS,MAAMoB,QAAQ,KAC/ED,OAAO/B,UAAOgB,SAAS,CAAEZ,UAAW,IAAQS,KAAM,IAAMD,QAAS,KAAOoB,QAAQ,MAChFD,OAAO/B,UAAOgB,SAAS,CAAEZ,UAAW,IAAQS,KAAM,KAAOD,QAAS,MAAQoB,QAAQ","file":"static/js/1.5b3fc3fe.chunk.js","sourcesContent":["const pow = Math.pow\nconst exp = Math.exp\n\nexport default class Config {\n  static title = \"Compound Interest\"\n  static description = \"Standard PeRT Equation.\"\n\n  static params = {\n    principal: {\n      label: \"Principal\",\n      default: 1000,\n      type: \"currency\",\n      min: 0,\n      max: Number.POSITIVE_INFINITY,      \n    },\n    periods: {\n      label: \"Periods\",\n      default: 10,\n      type: \"currency\",\n    },\n    rate: {\n      label: \"Interest Rate (Annual)\",\n      default: 0.029,\n      type: \"currency\",\n    }\n  }\n  static result = {\n    name: 'result',\n    label: \"Payment\",\n    type: \"currency\",\n  }\n  static equation =  ({principal, rate, periods} = {}) => {\n      return principal * exp(rate*periods);\n  }\n\n}\n\nexport const compoundInterestWithMonthlyContributions = \n(\n  principal,\n  monthlyContributions,\n  annualInterestRate,\n  compoundsPerYear,\n  numberOfYears\n  ) => {\n    const totalContrubutions = monthlyContributions * numberOfYears * 12;\n    const principalAfterInterest = principal * pow(1+((annualInterestRate/100)/compoundsPerYear),compoundsPerYear*numberOfYears);\n    const contributationsAfterInterest = monthlyContributions*((pow((1+((annualInterestRate/100)/compoundsPerYear)),(compoundsPerYear*numberOfYears))-1)/((annualInterestRate/100)/compoundsPerYear));\n    const futureValue = principalAfterInterest + contributationsAfterInterest;\n    return {\n      futureValue,\n      totalContrubutions,\n      interestOnPrincipal: principalAfterInterest - principal,\n      interestOnContributions: contributationsAfterInterest - totalContrubutions,\n      totalInterest: ((((principalAfterInterest-principal)+(contributationsAfterInterest-totalContrubutions))/futureValue)*100)\n    }\n};\n","import Config from './compound-interest';\n\ndescribe('compound-interest', () => {\n\n  it(\"returns the expected result from the equation\", () => {\n    expect(Config.equation({ principal: 1000.0, rate: 0.00, periods: 10})).toEqual(1000);\n    expect(Config.equation({ principal: 1000.0, rate: 0.05, periods: 1.0})).toEqual(1050);\n    expect(Config.equation({ principal: 1000.0, rate: 0.029, periods: 10.0})).toEqual(1336.427488025472);\n  });\n\n});\n"],"sourceRoot":""}